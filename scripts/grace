#!/usr/bin/env python

"""Grace Bot script

This script contains the commands needed to manage the bot.

Basic Commands:
    Bot Command(s):
        `start` : Starts the bot (`ctrl+c` to stop the bot)
    Database Command(s):
        `db create` : Creates the database and the tables
        `db delete` : Deletes the tables and the database
        `db seed` : Seeds the database tables (Initialize the default values)

The working environment can be changed by passing `-e` argument with any valid environments.
Available environment are production, development and test. The default one, is production.

Application commands syncing can be disabled by passing `--no-sync`. By default, commands
will automatically be synced, and it might take some time. It can be useful to disable it
when the application is restarted often, for example when testing a feature, trying to fix a bug, etc.
"""

from argparse import ArgumentParser, BooleanOptionalAction
from bot.grace import start
from scripts.database import *


def load_application(env, command_sync):
    """Set the environment by the given string (Available: 'production', 'development', 'test')"""
    info(f"Environment: '{env}'")
    app.load(env, command_sync=command_sync)


if __name__ == '__main__':
    commands = {
        'start': start,
        "db create": create_all,
        "db drop": drop_all,
        "db seed": seed_tables,
        "db reset": reset,
    }
    parser = ArgumentParser()

    parser.add_argument('command', type=str, nargs="*", help="[CATEGORY (Optional)] [ACTION]")
    parser.add_argument(
        '-e',
        type=str,
        choices=["production", "development", "test"],
        help="-e environment (The default is production)"
    )
    parser.add_argument(
        '--sync',
        action=BooleanOptionalAction,
        help="--sync Enables command sync (default), --no-sync Disables command sync")

    args = parser.parse_args()
    command = commands.get(' '.join(args.command))
    environment = args.e or "production"
    sync = args.sync or True

    if command:
        load_application(environment, sync)
        command()
    else:
        parser.error("Command not recognized")
